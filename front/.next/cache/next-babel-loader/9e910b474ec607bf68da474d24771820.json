{"ast":null,"code":"import { applyMiddleware, createStore, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\n\nvar configureStore = function configureStore(context) {\n  console.log(context); // 미들웨어\n\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) // 배포용 미들웨어\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); // 개발용 미들웨어\n\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga설정\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"names":["applyMiddleware","createStore","compose","createSagaMiddleware","createWrapper","composeWithDevTools","reducer","rootSaga","configureStore","context","console","log","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"sources":["C:/Users/hs/OneDrive/바탕 화면/CodeBox/Inflearn/NodeBird/front/store/configureStore.js"],"sourcesContent":["import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport reducer from \"../reducers\";\r\nimport rootSaga from \"../sagas\";\r\n\r\nconst configureStore = (context) => {\r\n  console.log(context);\r\n\r\n  // 미들웨어\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware];\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares)) // 배포용 미들웨어\r\n      : composeWithDevTools(applyMiddleware(...middlewares)); // 개발용 미들웨어\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga); // saga설정\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default wrapper;\r\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;EAClCC,OAAO,CAACC,GAAR,CAAYF,OAAZ,EADkC,CAGlC;;EACA,IAAMG,cAAc,GAAGT,oBAAoB,EAA3C;EACA,IAAMU,WAAW,GAAG,CAACD,cAAD,CAApB;EACA,IAAME,QAAQ,GACZ,QACIZ,OAAO,CAACF,eAAe,MAAf,SAAmBa,WAAnB,CAAD,CADX,CAC6C;EAD7C,EAEIR,mBAAmB,CAACL,eAAe,MAAf,SAAmBa,WAAnB,CAAD,CAHzB,CANkC,CAS0B;;EAC5D,IAAME,KAAK,GAAGd,WAAW,CAACK,OAAD,EAAUQ,QAAV,CAAzB;EACAC,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBV,QAAnB,CAAjB,CAXkC,CAWa;;EAC/C,OAAOQ,KAAP;AACD,CAbD;;AAeA,IAAMG,OAAO,GAAGd,aAAa,CAACI,cAAD,EAAiB;EAC5CW,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}