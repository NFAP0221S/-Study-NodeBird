{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction likePostAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* likePosts(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield throttle(5000, LIKE_POST_REQUEST, likePosts);\n}\n\nfunction* watchUnlikePost() {\n  yield throttle(5000, UNLIKE_POST_REQUEST, UnlikePosts);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","all","delay","fork","put","takeLatest","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","data","get","likePosts","action","result","type","err","response","loadPostsAPI","loadPosts","addPostAPI","post","content","withCredentials","addPost","id","console","error","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","UnlikePosts","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/hs/OneDrive/바탕 화면/CodeBox/Inflearn/NodeBird/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n  call,\r\n} from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  LIKE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* likePosts(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\r\n    \"/post\",\r\n    { content: data },\r\n    {\r\n      withCredentials: true,\r\n    }\r\n  );\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield throttle(5000, LIKE_POST_REQUEST, likePosts);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield throttle(5000, UNLIKE_POST_REQUEST, UnlikePosts);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}