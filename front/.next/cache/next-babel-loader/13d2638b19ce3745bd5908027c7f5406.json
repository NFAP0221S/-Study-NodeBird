{"ast":null,"code":"import axios from \"axios\";\nimport shortId from \"shortid\";\nimport { all, delay, fork, put, takeLatest, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, // generateDummyPost,\nLOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","shortId","all","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","call","type","generateDummyPost","err","console","error","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/hs/OneDrive/바탕 화면/CodeBox/Inflearn/NodeBird/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  // generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}